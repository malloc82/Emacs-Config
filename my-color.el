
;; ==========================================================
;; Setup syntax, background, and foreground coloring
;; ==========================================================

(require 'font-lock)
(global-font-lock-mode t)
;; (setq font-lock-auto-fontify t)
;; (setq font-lock-maximum-decoration t)
(make-face-italic font-lock-comment-face)

(auto-fill-mode nil)

(make-face 'font-lock-number-face)
(set-face-foreground 'font-lock-number-face "DodgerBlue4")
(setq font-lock-number-face 'font-lock-number-face)

(setq number-mode-list '(c-mode-hook
                         c++-mode-hook
                         lisp-mode-hook
                         emacs-lisp-mode-hook
                         python-mode-hook
                         cperl-mode-hook))

(dolist (mode number-mode-list)
  (add-hook mode
            '(lambda ()
              (font-lock-add-keywords nil
               '(("\\<\\([0-9]+\\([eE][+-]?[0-9]*\\)?\\|0[xX][0-9a-fA-F]+\\)\\>" .
                  font-lock-number-face))))))

(defun terminal-settings ()
  (set-face-foreground 'font-lock-preprocessor-face "magenta")
  (set-face-foreground 'font-lock-comment-face "blue")
  (set-face-foreground 'font-lock-comment-delimiter-face "blue")
  (set-face-foreground 'font-lock-type-face "green")
  (set-face-foreground 'font-lock-keyword-face "yellow")
  (set-face-foreground 'font-lock-variable-name-face "white")
  (set-face-foreground 'font-lock-function-name-face "white")
  (set-face-foreground 'font-lock-string-face "red")
  (set-face-foreground 'font-lock-constant-face "cyan")
  (set-face-foreground 'font-lock-number-face "red")

  (set-face-background 'region "blue")
  (set-face-background 'secondary-selection "cyan")
  )

(require 'dired)

(defun dark-night (&optional cur-frame)
  (let ((bg-color "black")
        (fg-color "white")
        (cur-color "yellow"))
    (set-background-color bg-color)
    (set-foreground-color fg-color)
    (set-cursor-color     cur-color)
    
    (set-face-background 'region "blue" cur-frame)
    ;; (set-face-background 'region "LightBlue3")
    (set-face-foreground 'font-lock-comment-face "chocolate1" cur-frame)
    (set-face-foreground 'font-lock-string-face "LightSalmon" cur-frame)
    (set-face-foreground 'font-lock-number-face "LightSalmon" cur-frame)
    (set-face-foreground 'font-lock-builtin-face "LightSteelBlue" cur-frame)
    (set-face-foreground 'font-lock-type-face "PaleGreen" cur-frame)
    (set-face-foreground 'font-lock-keyword-face "Cyan1" cur-frame)
    (set-face-foreground 'font-lock-variable-name-face "LightGoldenrod" cur-frame)
    (set-face-foreground 'font-lock-warning-face "Pink" cur-frame)
    (set-face-foreground 'font-lock-constant-face "Aquamarine" cur-frame)
    (set-face-foreground 'font-lock-function-name-face "DeepSkyBlue" cur-frame)
    ;; (set-face-foreground 'font-lock-function-name-face "gray70" cur-frame)
    (set-face-foreground 'font-lock-preprocessor-face "LightSteelBlue" cur-frame)
    (set-face-foreground 'dired-directory "SkyBlue2" cur-frame)
    (set-face-foreground 'minibuffer-prompt "cyan" cur-frame)
    (set-face-background 'secondary-selection "PaleVioletRed3")
    (setq term-default-bg-color bg-color)
    (setq term-default-fg-color fg-color)
    `((background-color . ,bg-color)
      (foreground-color . ,fg-color)
      (cursor-color     . ,cur-color))
    )  ;; (set-face-background 'secondary-selection "cyan")
  )

(defun gray-scale (&optional cur-frame)
  (let ((bg-color "gray12")
        (fg-color "white")
        (cur-color "yellow"))
    (set-background-color bg-color)
    (set-foreground-color fg-color)
    (set-cursor-color     cur-color)
  
    (set-face-background 'region "blue" cur-frame)
    ;; (set-face-background 'region "LightBlue3")
    (set-face-foreground 'font-lock-comment-face "chocolate1" cur-frame)
    (set-face-foreground 'font-lock-string-face "LightSalmon" cur-frame)
    (set-face-foreground 'font-lock-number-face "LightSalmon" cur-frame)
    (set-face-foreground 'font-lock-builtin-face "LightSteelBlue" cur-frame)
    (set-face-foreground 'font-lock-type-face "PaleGreen" cur-frame)
    (set-face-foreground 'font-lock-keyword-face "Cyan1" cur-frame)
    (set-face-foreground 'font-lock-variable-name-face "LightGoldenrod" cur-frame)
    (set-face-foreground 'font-lock-warning-face "Pink" cur-frame)
    (set-face-foreground 'font-lock-constant-face "Aquamarine" cur-frame)
    (set-face-foreground 'font-lock-function-name-face "DeepSkyBlue" cur-frame)
    ;; (set-face-foreground 'font-lock-function-name-face "gray65" cur-frame)
    (set-face-foreground 'font-lock-preprocessor-face "LightSteelBlue" cur-frame)
    (set-face-foreground 'dired-directory "SkyBlue2" cur-frame)
    (set-face-foreground 'minibuffer-prompt "cyan" cur-frame)
    (set-face-background 'secondary-selection "PaleVioletRed3")
    
    (setq term-default-bg-color bg-color)
    (setq term-default-fg-color fg-color)
    `((background-color . ,bg-color)
      (foreground-color . ,fg-color)
      (cursor-color     . ,cur-color))
  ;; (set-face-background 'secondary-selection "cyan")
    )
  )

(defun xcode-old (&optional cur-frame)
  (let ((bg-color "white")
        (fg-color "black")
        (cur-color "DarkSlateGray4"))
    
    (set-background-color bg-color)
    (set-foreground-color fg-color)
    (set-cursor-color     cur-color)
  
    (set-face-background 'region "LightBlue2" cur-frame)
    (set-face-foreground 'font-lock-comment-face "ForestGreen" cur-frame)
    (set-face-foreground 'font-lock-preprocessor-face "brown" cur-frame)
    (set-face-foreground 'font-lock-type-face "VioletRed3" cur-frame)
    (set-face-foreground 'font-lock-keyword-face "Purple" cur-frame)
    (set-face-foreground 'font-lock-variable-name-face "DarkBlue" cur-frame)
    ;; (set-face-foreground 'font-lock-function-name-face "gray40" cur-frame)
    (set-face-foreground 'font-lock-function-name-face "DarkCyan" cur-frame)
    (set-face-foreground 'font-lock-string-face "Red3" cur-frame)
    (set-face-foreground 'font-lock-constant-face "Cyan3" cur-frame)
    (set-face-foreground 'font-lock-number-face "blue" cur-frame)
    (set-face-foreground 'dired-directory "blue4" cur-frame)
    (set-face-foreground 'minibuffer-prompt "blue" cur-frame)
    (set-face-background 'secondary-selection "PaleVioletRed3")
    
    (setq term-default-bg-color bg-color)
    (setq term-default-fg-color fg-color)
    `((background-color . ,bg-color)
      (foreground-color . ,fg-color)
      (cursor-color     . ,cur-color))
    )
  )

(defun xcode ()
  (let ((bg-color "white")
        (fg-color "black")
        (cur-color "DarkSlateGray4")
	(ml-fcolor "grey65"))
    (custom-set-faces
     `(default ((t (:background ,bg-color :foreground ,fg-color))))
     `(cursor ((t (:background ,cur-color :foreground ,cur-color))))
     `(region ((t (:background "LightBlue2" :foreground ,fg-color))))
     `(mode-line ((t (:background ,ml-fcolor :foreground "black" :box (:line-width -1 :style released-button))))) ;; this part is for the edge black line
     '(mode-line-inactive ((t (:background "grey90" :foreground "grey20" :box (:line-width -1 :color "grey70") :weight light))))
     ;; '(mode-line-inactive ((t (:background "grey90" :foreground "grey20"))))
     '(fringe ((((class color) (background light)) (:background "grey95"))))
     ;; '(fringe ((t (:background "grey95"))))
     '(header-line ((default (:inherit mode-line)) (((class color grayscale) (background light)) (:background "grey90" :foreground "grey20" :box nil))))
     ;; '(header-line ((t (:background "grey90" :foreground "grey20"))))
     '(minibuffer-prompt ((t (:foreground "blue" :weight bold))))
     '(font-lock-builtin-face ((t (:foreground "MediumOrchid4"))))
     '(font-lock-comment-face ((t (:slant italic :foreground "ForestGreen"))))
     '(font-lock-constant-face ((t (:foreground "Cyan3" :weight bold))))
     '(font-lock-function-name-face ((t (:foreground "DarkCyan" :weight bold)))) ;; Alt: gray40
     '(font-lock-keyword-face ((t (:foreground "Purple" :weight bold))))
     '(font-lock-string-face ((t (:foreground "Red3"))))
     '(font-lock-type-face ((t (:foreground "VioletRed3" :weight bold))))
     '(font-lock-variable-name-face ((t (:foreground "DarkBlue"))))
     '(font-lock-warning-face ((t (:foreground "Red1" :weight bold))))
     '(secondary-selection ((t (:background "PaleVioletRed3")))) ;; for gdb hightlighting
     '(isearch ((t (:background "magenta3" :foreground "lightskyblue1"))))
     '(lazy-highlight ((t (:background "paleturquoise"))))
     '(link ((((class color) (min-colors 88) (background light)) (:foreground "blue1" :underline t))))
     '(link-visited ((default (:inherit link)) (((class color) (background light)) (:foreground "magenta4"))))
     ;; '(link ((t (:foreground "#0086b3" :underline t))))
     ;; '(link-visited ((t (:foreground "#800080" :underline t))))
     '(button ((((supports :underline t)) (:background "#f6f5ef" :weight bold :underline t))))
     ;; '(hl-line ((t (:background "#f6f5ef"))))
     )
    (set-face-background 'mode-line ml-fcolor)
    (setq term-default-bg-color bg-color)
    (setq term-default-fg-color fg-color)
    `((background-color . ,bg-color)
      (foreground-color . ,fg-color)
      (cursor-color     . ,cur-color))
    )
  )

(defun radiance ()
  (let ((bg-color "#ffffff")
        (fg-color "#333333")
        (cur-color "#aea79f"))
    (custom-set-faces
     `(default ((t (:background ,bg-color :foreground ,fg-color))))
     `(cursor ((t (:background ,cur-color :foreground ,cur-color))))
     '(region ((t (:background "#f6f5ef" :foreground "#333333"))))
     '(mode-line ((t (:background "#f6f5ef" :foreground "#333333" :box (:line-width -1 :style released-button)))))
     '(mode-line-inactive ((t (:background "#ffffff" :foreground "#333333"))))
     '(fringe ((t (:background "#f6f5ef"))))
     '(minibuffer-prompt ((t (:foreground "#f47321" :weight bold))))
     '(font-lock-builtin-face ((t (:foreground "#62124b"))))
     '(font-lock-comment-face ((t (:slant italic :foreground "#aea79f"))))
     '(font-lock-constant-face ((t (:foreground "#f68d47"))))
     '(font-lock-function-name-face ((t (:foreground "#860e73" :weight bold))))
     '(font-lock-keyword-face ((t (:foreground "#f47321" :weight bold))))
     '(font-lock-string-face ((t (:foreground "#dd1144"))))
     '(font-lock-type-face ((t (:foreground "#83a525"))))
     '(font-lock-variable-name-face ((t (:foreground "#8b005a"))))
     '(font-lock-warning-face ((t (:foreground "#e80000" :weight bold))))
     '(secondary-selection ((t (:background "PaleVioletRed3")))) ;; for gdb hightlighting
     '(isearch ((t (:background "#fedfc7" :foreground "#333333"))))
     '(lazy-highlight ((t (:background "#f6f5ef"))))
     '(link ((t (:foreground "#0086b3" :underline t))))
     '(link-visited ((t (:foreground "#800080" :underline t))))
     '(button ((t (:background "#f6f5ef" :weight bold))))
     '(header-line ((t (:background "#ffffff" :foreground "#62124b" :box nil))))
     '(hl-line ((t (:background "#f6f5ef")))))

    (setq term-default-bg-color bg-color)
    (setq term-default-fg-color fg-color)
    `((background-color . ,bg-color)
      (foreground-color . ,fg-color)
      (cursor-color     . ,cur-color))
    )

  )

(defvar *my-color-themes*
  '((dark-night . "dark night")
    (gray-scale . "gray scale")
    (xcode-old  . "xcode old")
    (xcode      . "xcode")
    (radiance   . "radiance")))

(defun darwin-setting (face-config)
  (setq initial-frame-alist `((top   . 25)  (left   . 10)
                              (width . 215)  (height . 62)
                              ;; ,@face-config
                              (font . "-apple-monaco-medium-r-normal--10-120-72-72-m-120-mac-roman")))
  (setq default-frame-alist `((width . 95)  (height . 50)
                              ;; ,@face-config
                              (font . "-apple-monaco-medium-r-normal--10-120-72-72-m-120-mac-roman")))
  (setq special-display-frame-alist `((width . 95) (height . 50)
                                      ;; ,@face-config
                                      (font . "-apple-monaco-medium-r-normal--10-120-72-72-m-120-mac-roman")))
  )

;; Emacs 23.1 on OS X transparent background : "ARGBBB000000"

(defun set-theme (theme-name)
  (interactive "aTheme name: ")
  (let ((cur-frame nil)) ;; (selected-frame)))
    (if (and (fboundp theme-name)
             (assoc theme-name *my-color-themes*))
        (let ((face-config (funcall theme-name)))
          ;; =================================
          ;; change gdb highlight color
          ;; =================================
          ;; (set-face-background 'secondary-selection "PaleVioletRed3")
          (if (string= system-type "darwin")
              (darwin-setting face-config)
              (setq initial-frame-alist `((top   . 25)  (left   . 10)
                                          (width . 95)  (height . 80)))
                                          ;;,@face-config))
              (setq special-display-frame-alist `((top   . 25)  (left   . 10)
                                                  (width . 95)  (height . 70)))
              (setq default-frame-alist `((top   . 50)  (left   . 120)
                                          (width . 95)  (height . 80)
                                          ))
                                          ;; ,@face-config))
              )
          )
      (message "Theme is not recognized"))
    )
  )

(if (not window-system)
    (terminal-settings)
    (set-theme 'xcode))
    ;; (window-settings "white-on-black"))
    ;; (window-settings "white-on-gray"))
    ;; (window-settings "radiance"))
(require 'parenface)

(setq search-highlight t)
(setq font-lock-maximum-decoration t)
(setq query-replace-highlight t)

(setq scroll-step 5)
